[{"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\Routes.js":"2","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\core\\Notfound.js":"3","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\core\\Home.js":"4","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\auth\\PrivateRoute.js":"5","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Signup.js":"6","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Signin.js":"7","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\ShowLeader.js":"8","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Leaderboard.js":"9","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Displayflow.js":"10","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\core\\Menu.js":"11","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\auth\\index.js":"12","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\apiHelper.js":"13","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Showflow.js":"14","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\ShowFlow1.js":"15","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\react-flow-renderer\\Nodes.jsx":"16","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\config.js":"17","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\react-flow-renderer\\index.jsx":"18","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\react-flow-renderer\\apiUser.js":"19"},{"size":216,"mtime":1644910736000,"results":"20","hashOfConfig":"21"},{"size":1531,"mtime":1645001258560,"results":"22","hashOfConfig":"21"},{"size":525,"mtime":1644910736000,"results":"23","hashOfConfig":"21"},{"size":3697,"mtime":1645001314887,"results":"24","hashOfConfig":"21"},{"size":589,"mtime":1644910736000,"results":"25","hashOfConfig":"21"},{"size":4630,"mtime":1644910736000,"results":"26","hashOfConfig":"21"},{"size":3834,"mtime":1644910736000,"results":"27","hashOfConfig":"21"},{"size":2184,"mtime":1645002575266,"results":"28","hashOfConfig":"21"},{"size":2739,"mtime":1645001040871,"results":"29","hashOfConfig":"21"},{"size":10339,"mtime":1645000791761,"results":"30","hashOfConfig":"21"},{"size":2489,"mtime":1644910736000,"results":"31","hashOfConfig":"21"},{"size":1863,"mtime":1644910736000,"results":"32","hashOfConfig":"21"},{"size":1354,"mtime":1644910736000,"results":"33","hashOfConfig":"21"},{"size":2193,"mtime":1645002133236,"results":"34","hashOfConfig":"21"},{"size":2195,"mtime":1645001076624,"results":"35","hashOfConfig":"21"},{"size":2801,"mtime":1644910736000,"results":"36","hashOfConfig":"21"},{"size":49,"mtime":1644910736000,"results":"37","hashOfConfig":"21"},{"size":8346,"mtime":1644910736000,"results":"38","hashOfConfig":"21"},{"size":440,"mtime":1644910736000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hlfylw",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\index.js",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\Routes.js",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\core\\Notfound.js",[],["86","87"],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\core\\Home.js",["88","89"],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\auth\\PrivateRoute.js",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Signup.js",["90"],"import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { signup, authenticate } from '../auth';\nimport classes from './Signup.module.css'\nimport Menu from '../core/Menu';\nconst Signup = () => {\n    const [values, setValues] = useState({\n        name: '',\n        email: '',\n        password: '',\n        error: '',\n        loading: false,\n        redirectToReferrer: false\n    });\n    const [retype, setRetype] = useState('')\n\n    const { name, email, password, loading, error, redirectToReferrer } = values;\n\n    const handleChange = name => event => {\n        setValues({ ...values, error: false, [name]: event.target.value });\n    };\n\n    const handlePassword = name => event => {\n        if (password === event.target.value) {\n            setValues({ ...values, error: false });\n            setRetype(event.target.value)\n        }\n        else {\n            setValues({ ...values, error: 'Passwords dont match' });\n            setRetype(event.target.value)\n        }\n    };\n\n    const clickSubmit = event => {\n        event.preventDefault();\n        if (!error) {\n            setValues({ ...values, error: false, loading: true });\n            signup({ name, email, password }).then(data => {\n                //console.log(data)\n                if (data.error) {\n                    //console.log(data.error)\n                    if (typeof data.error.message !== 'undefined')\n                        setValues({ ...values, error: data.error.message, loading: false })\n                    else\n                        setValues({ ...values, error: 'Validation failed', success: false });\n                } else {\n                    authenticate(data, () => {\n                        setValues({\n                            ...values,\n                            redirectToReferrer: true,\n\n                        });\n                    })\n                }\n            });\n        }\n\n    };\n\n    const signUpForm = () => (\n        <form>\n            <div className=\"form-group\">\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Name</label>\n                <input onChange={handleChange('name')} type=\"text\" className=\"form-control\" value={name} style={{ marginBottom: '15px' }} />\n            </div>\n\n            <div className=\"form-group\">\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Email</label>\n                <input onChange={handleChange('email')} type=\"email\" className=\"form-control\" value={email} style={{ marginBottom: '15px' }} />\n            </div>\n\n            <div className=\"form-group\">\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Password</label>\n                <input onChange={handleChange('password')} type=\"password\" className=\"form-control\" value={password} style={{ marginBottom: '15px' }} />\n            </div>\n\n            <div className=\"form-group\">\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }} >Retype Password</label>\n                <input onChange={handlePassword()} type=\"password\" className=\"form-control\" value={retype} style={{ marginBottom: '15px' }} />\n            </div>\n\n            <button onClick={clickSubmit} className={classes.btn}>\n                Submit\n            </button>\n        </form>\n    );\n\n    const showError = () => (\n        <div className=\"alert alert-danger\" style={{ display: error ? '' : 'none' }}>\n            {error}\n        </div>\n    );\n\n    const showLoading = () => (\n        loading && <div className=\"alert alert-info\" >\n            Loading...\n        </div>\n    );\n    const redirectUser = () => {\n        if (redirectToReferrer) {\n            return <Redirect to=\"/\" />\n        }\n    }\n    return (<div style={{ backgroundColor: 'rgba(5, 0, 255, 0.4)' }}><Menu>  </Menu>\n        <div style={{\n            width: '100%',\n            height: '100%',\n            // backgroundColor: 'rgba(5, 0, 255, 0.4)',\n            display: 'flex',\n            flexWrap: 'wrap'\n        }}>\n\n            <img style={{\n                marginTop: '10%', marginLeft: '15%', marginRight: '12%', borderRadius: '290px'\n            }} height=\"200px\" src=\"https://eligeeducar.cl/content/uploads/2021/10/un-astronauto-viendo-un-documental.jpg\"></img>\n\n            < div className={classes.rform} >\n                <div style={{ color: '#131D5A', paddingBottom: '20px' }}>            <h1 >Register!</h1>\n                </div>\n\n                {showLoading()}\n                {showError()}\n                {signUpForm()}\n            </div>\n            {redirectUser()}\n        </div >\n    </div>\n    );\n};\n\nexport default Signup;","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Signin.js",["91"],"import { isAuthenticated } from \"../auth\";\nimport { useState } from \"react\";\nimport { authenticate } from \"../auth\";\nimport { signin } from \"../auth\";\nimport { Redirect } from \"react-router-dom\";\nimport Menu from '../core/Menu'\nimport classes from './Signup.module.css'\nconst Signin = () => {\n    const [values, setValues] = useState({\n        email: 'test@gmail.com',\n        password: '$Test123',\n        error: '',\n        loading: false,\n        redirectToReferrer: false\n    });\n    const { email, password, error, loading, redirectToReferrer } = values;\n    const { user } = isAuthenticated()\n    const handleChange = name => event => {\n        setValues({ ...values, error: false, [name]: event.target.value });\n    };\n    const clickSubmit = event => {\n        event.preventDefault();\n        setValues({ ...values, error: false, loading: true });\n        signin({ email, password })\n            .then(data => {\n                if (data.error) {\n                    // console.log(data.error.message)\n                    if (typeof data.error.message !== 'undefined')\n                        setValues({ ...values, error: data.error.message, loading: false })\n                    else\n                        setValues({ ...values, error: 'Validation failed', success: false });\n                } else {\n                    authenticate(data, () => {\n                        setValues({\n                            ...values,\n                            redirectToReferrer: true\n                        });\n                    })\n                }\n            });\n    };\n    const signInForm = () => (\n        <form>\n\n            <div className=\"form-group\">\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }}>Email</label>\n                <input onChange={handleChange('email')} type=\"email\" className=\"form-control\" value={email} />\n            </div>\n\n            <div className=\"form-group\">\n                <label style={{ fontWeight: 'bold', color: '#131D5A' }}>Password</label>\n                <input onChange={handleChange('password')} type=\"password\" className=\"form-control\" value={password} />\n            </div>\n            <button onClick={clickSubmit} className={classes.btn}>\n                Submit\n            </button>\n        </form>\n    );\n\n    const showError = () => (\n        <div className=\"alert alert-danger\" style={{ display: error ? '' : 'none' }}>\n            {error}\n        </div>\n    );\n\n    const showLoading = () => (\n        loading && (<div className=\"alert alert-info\">\n            <h2>Loading...</h2>\n        </div>)\n    );\n\n    const redirectUser = () => {\n        if (redirectToReferrer) {\n            //console.log(user & user.role===1)\n            if (user && user.role === 1) {\n                return <Redirect to=\"/\" />;\n            } else {\n                return <Redirect to=\"/\" />;\n            }\n        }\n    }\n\n    return (<div style={{\n\n        backgroundColor: 'rgba(5, 0, 255, 0.4)',\n\n    }}><Menu >  </Menu>\n        <div style={{\n            width: '100%',\n            height: '100%',\n            // backgroundColor: 'rgba(5, 0, 255, 0.4)',\n            display: 'flex',\n            flexWrap: 'wrap'\n        }}>\n\n\n            <img style={{\n                marginTop: '10%', marginLeft: '15%', marginRight: '12%', borderRadius: '290px'\n            }} height=\"200px\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ7Mvq2MGMEzWXPTUfqbqgtlUazwyoOYpB7lA&usqp=CAU\"></img>\n\n            <div className={classes.rform}>\n                {showLoading()}\n                {showError()}\n                <div style={{ color: '#131D5A', paddingBottom: '20px' }}>            <h1 >Signin !</h1>\n                </div>\n                {signInForm()}\n                {redirectUser()}\n            </div>\n        </div>\n    </div >\n    )\n}\n\nexport default Signin;","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\ShowLeader.js",["92"],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Leaderboard.js",["93","94","95","96","97","98","99","100","101"],"import { isAuthenticated } from '../auth'\nimport { getCategories, getFlows } from \"./apiHelper\";\nimport { useEffect, useState } from \"react\";\nimport ReactFlowRenderer from '../react-flow-renderer';\nimport Showflow from './Showflow'\nimport Menu from \"../core/Menu\";\nimport { Redirect } from 'react-router-dom';\nimport ShowLeader from './ShowLeader';\nimport ShowFlow1 from './ShowFlow1';\nconst Leaderboard = () => {\n    const [categories, setCategories] = useState(false)\n    const [flowcharts, setFlowcharts] = useState(false)\n    const [currentFlowChart, setCurrentFlowChart] = useState([])\n    const [myflag, setMyflag] = useState(false)\n    const [flag, setFlag] = useState(false)\n    const init = () => {\n        getCategories().then(data => {\n            if (data.error) { console.log(\"error occured\") }\n            else {\n                let mySet1 = new Set()\n                data.map((d, i) => {\n                    // console.log(d.category)\n                    mySet1.add(d.category)\n                })\n                const array = [...mySet1]; setCategories(array)\n            }\n        })\n\n        getFlows().then(data => { if (data.error) { console.log(\"error occured\") } else { setFlowcharts(data) } })\n    };\n    const handleClick = (e) => {\n        setCurrentFlowChart([]) // console.log(e.target.value) \n        let x = []\n        flowcharts.map((fc, i) => { // console.log(fc.category === e.target.value) \n            if (fc.category === e.target.value) { x.push(fc) }\n        })\n        setCurrentFlowChart(x)\n        setFlag(true)\n\n        // console.log(currentFlowChart)\n    }\n    useEffect(() => { init(); }, []);\n    return (<div style={{ backgroundColor: 'rgba(5, 0, 255, 0.4)', height: '100vh' }}>\n        <Menu>  </Menu>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        {!flag &&\n            <div>\n                <h2 style={{ marginLeft: '20%', color: 'black' }} >Please select a Category</h2>\n                <br></br>\n\n                <div style={{ width: '100%', display: 'flex',flexWrap: 'wrap' }}>\n                    {categories && categories.map((fc, i) => {\n                        return (<div key={i}>\n                            <button style={{marginBottom:'20px', minWidth:'100px', backgroundColor: '#131D5A', color: 'white', padding: '10px', textAlign: 'center', marginLeft: '80px', fontSize: '30px', height: '100px', borderRadius: '10px' }} key={i} value={fc} onClick={(e) => handleClick(e)} >\n                                {fc} </button>\n\n                        </div>)\n                    })}\n\n                </div>\n            </div>\n        }\n        {flag && <ShowFlow1 flow={currentFlowChart}></ShowFlow1>}\n\n    </div >\n    )\n}\nexport default Leaderboard;","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Displayflow.js",["102","103","104","105","106","107","108","109","110","111"],"//user side flowchart playground to find correct flowchart\n\nimport { useStopwatch } from 'react-timer-hook';\nimport React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Menu from \"../core/Menu\"\nimport ReactFlow, {\n    removeElements,\n    updateEdge,\n    addEdge,\n    Background,\n    MiniMap,\n    Controls\n} from \"react-flow-renderer\";\nimport { nodeTypes } from \"../react-flow-renderer/Nodes\";\nimport { getFlow, sendTimeData } from './apiHelper'\nconst Displayflow = (props) => {\n    const [elements, setElements] = useState([]);\n    const [answer, setAnswer] = useState([]);\n    const [arr, setArr] = useState([])\n    const [flag, setFlag] = useState(false)\n    const [activeNode, setActiveNode] = useState();\n    const [clicked, setClicked] = useState(false)\n    const [newName, setNewName] = useState(\"\");\n    const [instance, setInstance] = useState();\n    const [time, setTime] = useState(1000)\n    const [data, setData] = useState(false)\n    const [button, setButton] = useState(false)\n    const [penal, setPenal] = useState(0)\n    const [leader, setLeader] = useState([])\n    const {\n        seconds,\n        minutes,\n    } = useStopwatch({ autoStart: true });\n\n    useEffect(() => {\n        console.log(props.elements)\n        showCurrentFlow(props.match.params.id)\n        if (activeNode) setNewName(activeNode.data.label);\n    }, [activeNode]);\n\n    const connectHandler = (params) => {\n        setElements((prev) => addEdge(params, prev));\n    };\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\n\n    const onLoad = (reactFlowInstance) => {\n        setInstance(reactFlowInstance);\n        reactFlowInstance.fitView();\n    };\n    const shuffle = (array) => {\n        let currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (currentIndex != 0) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    var arr1 = []\n    const showCurrentFlow = (id) => {\n        getFlow(id)\n            .then(data => {\n                if (data.error) {\n\n                } else {\n                    setData(data)\n                    setTime(data.best_time)\n                    console.log(data)\n                    setAnswer(data.nodes)\n                    let x = data.nodes;\n                    let y = []\n                    let q = []\n                    for (let i of x) {\n                        if (i.hasOwnProperty(\"position\")) {\n                            y.push(i)\n                        }\n                        else if (i[\"flg\"] === 1) {\n                            console.log(i)\n                            q = elements\n                            q.push(i)\n\n                        }\n                        else {\n                            let p = arr\n                            p.push(i)\n                            setArr(p)\n                        }\n\n                    }\n                    y = shuffle(y)\n                    let z = 0\n                    for (let i of y) {\n\n                        i[\"position\"][\"x\"] = 0\n                        i[\"position\"][\"y\"] = 100 * z\n                        z++;\n                    }\n                    for (let i = 0; i < q.length; i++) {\n                        y.push(q[i])\n                    }\n                    console.log(y)\n                    setElements(y)\n\n                }\n            });\n    }\n    const saveChangesHandler = () => {\n        setClicked(true)\n\n        if (elements.length !== answer.length)\n            console.log(\"wrong answer\")\n        else {\n\n            // for (let ele of answer) {\n            //     const index = elements.findIndex((element) => JSON.stringify(element) === JSON.stringify(ele);\n            //     if (index === -1)\n            //         console.log(\"wrong \")\n            // }\n            var x = elements\n            for (let i of x) {\n                if (i.hasOwnProperty(\"position\") === false) {\n                    arr1.push(i)\n                }\n            }\n\n            arr.sort();\n            arr1.sort();\n            console.log(arr)\n            console.log(arr1)\n            let i = 0\n\n            for (i = 0; i < arr.length; i++) {\n\n                let src = arr[i][\"source\"]\n\n                var index = arr1.findIndex((a) => (a[\"source\"] === src))\n\n                if (arr1[index][\"target\"] !== arr[i][\"target\"]) {\n                    console.log(\"wrong answer\")\n\n                    break;\n                }\n            }\n            if (i == arr.length) {\n                console.log(\"correct\")\n                setFlag(true)\n                let w = minutes * 60 + seconds + penal\n                let u = data.leaderboard\n                let r = JSON.parse(localStorage.getItem('jwt')).user[\"name\"]\n                u.push({ name: r, time: w })\n                let o = {\n                    leaderboard: u\n                }\n                sendTimeData(props.match.params.id, o).then(data => {\n                    console.log(data)\n\n                    console.log(time > w)\n                    if (time > w) {\n                        setTime(w)\n                        let g = {\n                            best_time: w,\n                            best_name: JSON.parse(localStorage.getItem('jwt')).user[\"name\"]\n                        }\n                        sendTimeData(props.match.params.id, g).then(data => {\n                            console.log(data)\n                        })\n                    }\n                })\n            }\n        }\n\n    };\n    const buttonHandler = () => {\n        setButton(true)\n        alert(\"You will be penalized\")\n        console.log(minutes)\n        setPenal(10)\n    }\n    const leaderHandler = () => {\n        setLeader(data.leaderboard)\n    }\n\n    return (<div>\n        <Menu></Menu>\n        <div style={{ backgroundColor: 'rgba(5,0,255,0.4)' }}>\n\n            {/* <h3 style={{ color: 'darkBlue' }}>\n                Best Score: {data && data.best_time}<br></br>\n                By:{data && data.best_name}\n            </h3> */}\n\n\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n\n\n            <div style={{ display: 'flex',flexWrap: 'wrap' }}>\n                {/* <button style={{ marginLeft: '150px', backgroundColor: 'black', color: 'white', paddingLeft: '20px', width: '300px', height: '60px', borderRadius: '40px' }} onClick={leaderHandler}>Show Leaderboard</button>\n                {\n                    JSON.stringify(leader)} */}\n                <br></br><br></br>\n\n                {!button &&\n                    <button style={{ backgroundColor: '#131D5A', marginRight: '260px', color: 'white', padding: '10px', textAlign: 'center', marginLeft: '12%', width: '200px', height: '60px', borderRadius: '40px' }} onClick={buttonHandler}>Show Hint</button>\n                }\n\n                {button && <p style={{ backgroundColor: 'black', color: 'white', marginLeft: '13%', width: '300px', height: '60px', borderRadius: '40px', paddingTop: '10px', paddingLeft: '6px', marginRight: '150px' }}>{data.hint}</p>}\n\n                <h1 style={{ backgroundColor: '#131D5A', color: 'white', paddingLeft: '20px', textAlign: 'center', width: '120px', height: '60px', borderRadius: '40px' }}>\n                    <span>{minutes}</span>:<span>{seconds}</span>\n                </h1>\n                {!clicked && <button style={{ backgroundColor: '#131D5A', color: 'white', padding: '10px', textAlign: 'center', marginLeft: '20%', width: '200px', height: '60px', borderRadius: '40px' }} type=\"button\" onClick={saveChangesHandler}>\n                    Submit\n                </button>\n                }\n                {\n                    flag && <div style={{ backgroundColor: 'green', color: 'white', padding: '10px', textAlign: 'center', marginLeft: '20%', width: '200px', height: '60px', borderRadius: '40px' }}>\n                        correct answer\n                    </div>\n                }\n                {\n\n                    !flag && clicked && <div style={{ backgroundColor: 'red', color: 'white', padding: '10px', textAlign: 'center', marginLeft: '20%', width: '200px', height: '60px', borderRadius: '40px' }}>\n                        wrong answer\n                    </div>\n                }\n\n            </div>\n\n            <div\n                style={{\n                    height: \"86vh\",\n                    width: \"75vw\",\n                    border: \"1px solid black\",\n                    marginLeft: \"12.5vw\",\n                    backgroundColor: '#131D5A'\n                }}\n            >\n\n                <ReactFlow\n                    elements={elements}\n                    onConnect={connectHandler}\n                    deleteKeyCode={8 || 46}\n                    onEdgeUpdate={edgeUpdateHandler}\n                    nodeTypes={nodeTypes}\n                    snapToGrid={true}\n                    snapGrid={[16, 16]}\n                    connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\n                    onLoad={onLoad}\n                >\n                    {/* <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" /> */}\n\n                    <MiniMap\n                        nodeColor={(node) => {\n                            switch (node.type) {\n                                case \"rectangle\":\n                                    return \"red\";\n                                case \"startNode\":\n                                    return \"#00ff00\";\n                                case \"endNode\":\n                                    return \"rgb(0,0,255)\";\n                                case \"paraNode\":\n                                    return \"rgb(120,120,120)\"\n                                default:\n                                    return \"#eee\";\n                            }\n                        }}\n                    />\n\n                    <Controls />\n                </ReactFlow>\n\n\n\n\n\n\n            </div>\n        </div></div>\n    );\n};\n\nexport default withRouter(Displayflow);","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\core\\Menu.js",["112"],"import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { isAuthenticated, signout } from \"../auth\";\nimport classes from './Menu.module.css'\nconst isActive = (history, path) => {\n    if (history.location.pathname === path) {\n        return { backgroundColor: '#131D5A', borderRadius: '30px', color: 'white' }\n    }\n    else {\n        return { color: 'black', fontWeight: 'bolder' }\n    }\n}\n\nconst Menu = (props) => {\n    return (<div>\n        <ul className={`nav nav-tabs justify-content-start ${classes.nav}`} style={{ float: 'left', width: '50%', margin: 0, padding: 0 }}>\n            <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/\"><img height=\"60px\" src=\"https://www.logomaker.com/api/main/images/1j+ojFVDOMkX9Wytexe43D6khvGCpB5Lmh3NwXs1M3EMoAJtliQpgfRu9...8y\"></img></Link>\n            </li>\n            {/* {isAuthenticated() &&\n                <li className=\"nav-item\">\n                    <Link className=\"nav-link\" style={isActive(props.history, '/dashboard')} to=\"/dashboard\">Dashboard</Link>\n                </li>\n            } */}\n\n            <li className=\"nav-item\">\n                <Link className=\"nav-link mt-3\" style={isActive(props.history, '/leaderboard')} to=\"/leaderboard\">Leaderboard</Link>\n            </li>\n\n\n        </ul>\n        <ul className={`nav nav-tabs justify-content-end ${classes.nav}`} style={{ float: 'right', width: '50%', margin: '0', padding: '20px', paddingRight: '50px' }}>\n            {!isAuthenticated() &&\n                <React.Fragment>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" style={isActive(props.history, '/signin')} to=\"/signin\">Signin</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" style={isActive(props.history, '/signup')} to=\"/signup\">Signup</Link>\n                    </li>\n                </React.Fragment>\n            }\n            {isAuthenticated() &&\n                <li className=\"nav-item \" >\n                    <span className={`nav-link ${classes.signout}`} style={{ cursor: 'pointer', fontWeight: 'bolder' }} onClick={\n                        () =>\n                            signout(() => {\n                                props.history.push(\"/\")\n                            })\n                    }>Signout</span>\n                </li>\n            }\n\n\n\n        </ul>\n    </div>\n    )\n}\n\nexport default withRouter(Menu);","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\auth\\index.js",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\apiHelper.js",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\Showflow.js",["113"],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\user\\ShowFlow1.js",["114"],"//user side show flow charts of certain category\n\nimport { useState, useEffect } from \"react\"\nimport { getFlows, getFlow } from \"./apiHelper\";\nimport { withRouter } from \"react-router-dom\";\nconst Showflow1 = (props) => {\n    const [flowcharts, setFlowcharts] = useState(false)\n    const [currentFlowChart, setCurrentFlowChart] = useState(false)\n    const init = () => {\n        getFlows().then(data => {\n            if (data.error) {\n                console.log(\"error occured\")\n            } else {\n                setFlowcharts(data)\n            }\n        })\n    };\n    useEffect(() => {\n        init();\n\n    }, []);\n    const handleClick = (e) => {\n\n        getFlow(e.target.value).then(data => {\n            if (data.error) {\n                console.log(\"error occured\")\n            } else {\n                setCurrentFlowChart(data)\n                console.log(currentFlowChart)\n                props.history.push(`/leaderboard/${data._id}`)\n            }\n            //  console.log(e.target.value)\n            //console.log(\"clicked \")\n        })\n    }\n\n\n\n    return (\n        <div>\n            <br></br>\n            <br></br>\n            <h2 style={{ marginLeft: '20%', color: 'black' }}>Select a Flowchart</h2>\n\n            <br></br>\n            <br></br>\n            {/* {JSON.stringify(props.flow)} */}\n            <div style={{ display: 'flex',flexWrap: 'wrap' }} >\n                {\n                    props.flow && props.flow.map((fc, i) => {\n\n                        return (<div key={i}>\n\n                            <button style={{marginBottom:'20px', minWidth:'100px', backgroundColor: '#131D5A', color: 'white', padding: '10px', textAlign: 'center', marginLeft: '80px', fontSize: '30px', height: '100px', borderRadius: '10px' }} key={i} value={fc._id} onClick={(e) => handleClick(e)}>\n                                {fc.name}\n\n                            </button>\n                            <br></br>\n                            <br></br>\n\n                        </div>)\n                    })\n                }\n                {/* {currentFlowChart && JSON.stringify(currentFlowChart)} */}\n            </div>\n        </div >\n    )\n}\nexport default withRouter(Showflow1)","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\react-flow-renderer\\Nodes.jsx",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\config.js",[],"C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\react-flow-renderer\\index.jsx",["115"],"//admin side to create flowchart\n\nimport React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport ReactFlow, {\n  removeElements,\n  updateEdge,\n  addEdge,\n  Background,\n  MiniMap,\n  Controls\n} from \"react-flow-renderer\";\nimport { saveFlow } from \"./apiUser\";\n\nimport { nodeTypes } from \"./Nodes\";\n\nconst ReactFlowRenderer = (props) => {\n  const [elements, setElements] = useState([]);\n\n  const [name, setName] = useState(\"\");\n  const [flowname, setflowName] = useState(\"\");\n  const [catname, setcatName] = useState(\"\");\n  const [activeNode, setActiveNode] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [instance, setInstance] = useState();\n  const [hint, setHint] = useState(\"\");\n\n  useEffect(() => {\n    if (activeNode) setNewName(activeNode.data.label);\n  }, [activeNode]);\n\n  const elementRemoveHandler = (elementTobeRemoved) => {\n    setElements((prev) => removeElements(elementTobeRemoved, prev));\n  };\n\n  const connectHandler = (params) => {\n    setElements((prev) => addEdge(params, prev));\n  };\n\n  const addRectangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: { label: `${name}` },\n      type: \"rectangle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n    setElements((prev) => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n  const addDiamondHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: { label: `${name}` },\n      type: \"diamond\",\n      position: {\n        x: 100,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n    const newNode1 = {\n      id: `${Date.now() + 1}`,\n      data: { label: `Yes` },\n      type: \"rectangle\",\n      position: {\n        x: 0,\n        y: 100\n      }\n    };\n    newNode1.data = { ...newNode1.data, id: `${newNode1.id}` };\n\n    const newNode2 = {\n      id: `${Date.now() + 2}`,\n      data: { label: `No` },\n      type: \"rectangle\",\n      position: {\n        x: 200,\n        y: 100\n      }\n    };\n    newNode2.data = { ...newNode2.data, id: `${newNode2.id}` };\n\n\n    const edge1 = {\n      id: `${Date.now() + 3}`,\n      source: `${newNode.id}`,\n      // target: '2',\n      sourceHandle: `${newNode.id}.bottom`,\n      target: `${newNode1.id}`,\n      targetHandle: `${newNode1.id}.top`,\n      flg: 1\n    }\n\n    const edge2 = {\n      id: `${Date.now() + 4}`,\n      source: `${newNode.id}`,\n      sourceHandle: `${newNode.id}.top`,\n      target: `${newNode2.id}`,\n      targetHandle: `${newNode2.id}.top`,\n      flg: 1\n    }\n\n    setElements((prev) => {\n      return [...prev, newNode, newNode1, newNode2, edge1, edge2];\n    });\n    console.log(elements)\n    setName(\"\");\n  };\n\n  const addParalellogramHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: { label: `${name}` },\n      type: \"paraNode\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n    setElements((prev) => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addStartHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: { label: `${name}` },\n      type: \"startNode\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n    setElements((prev) => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addEndHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: { label: `${name}` },\n      type: \"endNode\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n    setElements((prev) => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n\n  const edgeUpdateHandler = (oldEdge, newConnection) =>\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\n\n  const clickHandler = (e) => {\n    var htmlString = e.target.outerHTML.toString();\n    var index = htmlString.indexOf(` id=\"`);\n    index += 5;\n    const currentId = htmlString.substr(index, 13);\n\n    elements.forEach((_current) => {\n      if (_current.id === currentId) {\n        setActiveNode(_current);\n      }\n    });\n    // setNewName(activeNode.data.label)\n  };\n\n  const updateNodeHandler = () => {\n    if (!activeNode) return;\n    setElements(\n      elements.map((_current) => {\n        if (_current.id === activeNode.id) {\n          return {\n            ..._current,\n            data: { label: newName, id: _current.data.id }\n          };\n        }\n\n        return _current;\n      })\n    );\n  };\n\n  const onLoad = (reactFlowInstance) => {\n    setInstance(reactFlowInstance);\n    reactFlowInstance.fitView();\n  };\n\n  const saveChangesHandler = () => {\n    let x = {}\n    x[\"nodes\"] = instance.getElements()\n    x[\"name\"] = flowname\n    x[\"category\"] = catname\n    x[\"hint\"] = hint\n    saveFlow(JSON.stringify(x))\n      .then(data => {\n        if (data.error) {\n\n        } else {\n          console.log(data)\n          // props.history.push('/')\n          alert(\"changes saved\")\n        }\n      });\n  };\n\n  return (\n    <div><div>\n      <h1>Create Flow Chart</h1>\n      <label>Enter name of your flowchart :</label>\n      <input\n        value={flowname}\n        onChange={(e) => setflowName(e.target.value)}\n        type=\"text\"\n        placeholder=\"flowchart name\"\n      />\n      <br></br>\n      <label>Enter the category  : </label>\n      <input\n        value={catname}\n        onChange={(e) => setcatName(e.target.value)}\n        type=\"text\"\n        placeholder=\"category\"\n      /><br></br>\n      <label>Enter hint  : </label>\n      <input\n        value={hint}\n        onChange={(e) => setHint(e.target.value)}\n        type=\"text\"\n        placeholder=\"hint\"\n      />\n\n    </div>\n      <br></br>\n      <div\n        style={{\n          height: \"87vh\",\n          width: \"87vw\",\n          border: \"1px solid black\",\n          marginLeft: \"6vw\",\n          backgroundColor: '#131D5A'\n        }}\n      >\n\n        <ReactFlow\n          elements={elements}\n          onElementsRemove={elementRemoveHandler}\n          onConnect={connectHandler}\n          deleteKeyCode={8 || 46}\n          onEdgeUpdate={edgeUpdateHandler}\n          nodeTypes={nodeTypes}\n          snapToGrid={true}\n          snapGrid={[16, 16]}\n          connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\n          onDoubleClick={clickHandler}\n          onLoad={onLoad}\n        >\n          {/* <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" /> */}\n\n          <MiniMap\n            nodeColor={(node) => {\n              switch (node.type) {\n                case \"rectangle\":\n                  return \"red\";\n                case \"startNode\":\n                  return \"#00ff00\";\n                case \"endNode\":\n                  return \"rgb(0,0,255)\";\n                case \"paraNode\":\n                  return \"rgb(120,120,120)\";\n\n                default:\n                  return \"#eee\";\n              }\n            }}\n          />\n\n          <Controls />\n        </ReactFlow>\n\n        <div>\n          <input\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            type=\"text\"\n            placeholder=\"Enter new node name\"\n          />\n          <button type=\"button\" onClick={addStartHandler}>\n            Create Start Node\n          </button>\n          <button type=\"button\" onClick={addRectangleHandler}>\n            Create Rectangle\n          </button>\n          <button type=\"button\" onClick={addParalellogramHandler}>\n            Create Paralellogram\n          </button>\n          <button type=\"button\" onClick={addEndHandler}>\n            Create End Node\n          </button>\n          <button type=\"button\" onClick={addDiamondHandler}>\n            Create Diamond\n          </button>\n        </div>\n\n\n        <div>\n          <input\n            value={newName}\n            onChange={(e) => setNewName(e.target.value)}\n            type=\"text\"\n          />\n\n          <button type=\"button\" onClick={updateNodeHandler}>\n            Update\n          </button>\n        </div>\n\n        <button type=\"button\" onClick={saveChangesHandler}>\n          Save changes\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(ReactFlowRenderer);","C:\\Users\\Admin\\Downloads\\flowtionfinal-main\\frontend\\src\\react-flow-renderer\\apiUser.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":21,"column":33,"nodeType":"122","messageId":"123","endLine":21,"endColumn":35},{"ruleId":"120","severity":1,"message":"121","line":43,"column":32,"nodeType":"122","messageId":"123","endLine":43,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":113,"column":13,"nodeType":"126","endLine":115,"endColumn":123},{"ruleId":"124","severity":1,"message":"125","line":97,"column":13,"nodeType":"126","endLine":99,"endColumn":137},{"ruleId":"127","severity":1,"message":"128","line":11,"column":8,"nodeType":"129","endLine":11,"endColumn":10,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":1,"column":10,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"135","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":25},{"ruleId":"131","severity":1,"message":"136","line":5,"column":8,"nodeType":"133","messageId":"134","endLine":5,"endColumn":16},{"ruleId":"131","severity":1,"message":"137","line":7,"column":10,"nodeType":"133","messageId":"134","endLine":7,"endColumn":18},{"ruleId":"131","severity":1,"message":"138","line":8,"column":8,"nodeType":"133","messageId":"134","endLine":8,"endColumn":18},{"ruleId":"131","severity":1,"message":"139","line":14,"column":12,"nodeType":"133","messageId":"134","endLine":14,"endColumn":18},{"ruleId":"131","severity":1,"message":"140","line":14,"column":20,"nodeType":"133","messageId":"134","endLine":14,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":21,"column":33,"nodeType":"122","messageId":"123","endLine":21,"endColumn":35},{"ruleId":"120","severity":1,"message":"121","line":34,"column":32,"nodeType":"122","messageId":"123","endLine":34,"endColumn":34},{"ruleId":"131","severity":1,"message":"141","line":8,"column":5,"nodeType":"133","messageId":"134","endLine":8,"endColumn":19},{"ruleId":"131","severity":1,"message":"142","line":11,"column":5,"nodeType":"133","messageId":"134","endLine":11,"endColumn":15},{"ruleId":"131","severity":1,"message":"143","line":22,"column":24,"nodeType":"133","messageId":"134","endLine":22,"endColumn":37},{"ruleId":"131","severity":1,"message":"144","line":24,"column":12,"nodeType":"133","messageId":"134","endLine":24,"endColumn":19},{"ruleId":"131","severity":1,"message":"145","line":25,"column":12,"nodeType":"133","messageId":"134","endLine":25,"endColumn":20},{"ruleId":"131","severity":1,"message":"146","line":30,"column":12,"nodeType":"133","messageId":"134","endLine":30,"endColumn":18},{"ruleId":"127","severity":1,"message":"147","line":40,"column":8,"nodeType":"129","endLine":40,"endColumn":20,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":56,"column":29,"nodeType":"151","messageId":"152","endLine":56,"endColumn":31},{"ruleId":"149","severity":1,"message":"153","line":155,"column":19,"nodeType":"151","messageId":"152","endLine":155,"endColumn":21},{"ruleId":"131","severity":1,"message":"154","line":190,"column":11,"nodeType":"133","messageId":"134","endLine":190,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":18,"column":51,"nodeType":"126","endLine":18,"endColumn":181},{"ruleId":"131","severity":1,"message":"155","line":7,"column":12,"nodeType":"133","messageId":"134","endLine":7,"endColumn":22},{"ruleId":"131","severity":1,"message":"155","line":7,"column":12,"nodeType":"133","messageId":"134","endLine":7,"endColumn":22},{"ruleId":"131","severity":1,"message":"142","line":10,"column":3,"nodeType":"133","messageId":"134","endLine":10,"endColumn":13},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["158"],"no-unused-vars","'isAuthenticated' is defined but never used.","Identifier","unusedVar","'ReactFlowRenderer' is defined but never used.","'Showflow' is defined but never used.","'Redirect' is defined but never used.","'ShowLeader' is defined but never used.","'myflag' is assigned a value but never used.","'setMyflag' is assigned a value but never used.","'removeElements' is defined but never used.","'Background' is defined but never used.","'setActiveNode' is assigned a value but never used.","'newName' is assigned a value but never used.","'instance' is assigned a value but never used.","'leader' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.elements', 'props.match.params.id', and 'showCurrentFlow'. Either include them or remove the dependency array.",["159"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'leaderHandler' is assigned a value but never used.","'flowcharts' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [props.match.params.id]",{"range":"164","text":"165"},"Update the dependencies array to be: [activeNode, props.elements, props.match.params.id, showCurrentFlow]",{"range":"166","text":"167"},[419,421],"[props.match.params.id]",[1384,1396],"[activeNode, props.elements, props.match.params.id, showCurrentFlow]"]